#ifndef OSMCHANGE_INPUT_FORMAT_HPP
#define OSMCHANGE_INPUT_FORMAT_HPP

/*


NOTE: This is a heavily modified xml_input_format.hpp version



This file is part of Osmium (http://osmcode.org/libosmium).

Copyright 2013-2017 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <expat.h>
#include <expat_external.h>

#include <osmium/builder/osm_object_builder.hpp>
#include <osmium/io/detail/input_format.hpp>
#include <osmium/io/error.hpp>
#include <osmium/io/file_format.hpp>
#include <osmium/io/header.hpp>
#include <osmium/memory/buffer.hpp>
#include <osmium/memory/item.hpp>
#include <osmium/osm/item_type.hpp>
#include <osmium/osm/location.hpp>
#include <osmium/osm/node.hpp>
#include <osmium/osm/node_ref.hpp>
#include <osmium/osm/object.hpp>
#include <osmium/osm/relation.hpp>
#include <osmium/osm/types.hpp>
#include <osmium/osm/types_from_string.hpp>
#include <osmium/osm/way.hpp>
#include <osmium/thread/util.hpp>
#include <osmium/util/cast.hpp>

#include <algorithm>
#include <cassert>
#include <cstdint>
#include <cstring>
#include <memory>
#include <sstream>
#include <string>

using namespace osmium;
using namespace osmium::io;



/**
 * Exception thrown when the XML parser failed. The exception contains
 * (if available) information about the place where the error happened
 * and the type of error.
 */
struct xml_error : public io_error {

	uint64_t line = 0;
	uint64_t column = 0;
	XML_Error error_code;
	std::string error_string;

	explicit xml_error(const XML_Parser& parser) :
		io_error(std::string{"XML parsing error at line "}
				+ std::to_string(XML_GetCurrentLineNumber(parser))
				+ ", column "
				+ std::to_string(XML_GetCurrentColumnNumber(parser))
				+ ": "
				+ XML_ErrorString(XML_GetErrorCode(parser))),
		line(XML_GetCurrentLineNumber(parser)),
		column(XML_GetCurrentColumnNumber(parser)),
		error_code(XML_GetErrorCode(parser)),
		error_string(XML_ErrorString(error_code)) {
	}

	explicit xml_error(const std::string& message) :
		io_error(message),
		error_code(),
		error_string(message) {
	}

}; // struct xml_error




class OSMChangeXMLParser : public osmium::io::detail::Parser {

	static constexpr int buffer_size = 2 * 1000 * 1000;

	enum class context {
		root,
		top,
		in_create,
		in_modify,
		in_delete,
		node,
		way,
		relation,
		in_object
	}; // enum class context


	context m_context = context::root;
	context m_operation = context::root;             // current operation context
	context m_last_context = context::root;

	bool m_if_unused = false;

	osmium::io::Header m_header{};

	osmium::memory::Buffer m_buffer;

	std::unique_ptr<osmium::builder::NodeBuilder>                m_node_builder{};
	std::unique_ptr<osmium::builder::WayBuilder>                 m_way_builder{};
	std::unique_ptr<osmium::builder::RelationBuilder>            m_relation_builder{};

	std::unique_ptr<osmium::builder::TagListBuilder>             m_tl_builder{};
	std::unique_ptr<osmium::builder::WayNodeListBuilder>         m_wnl_builder{};
	std::unique_ptr<osmium::builder::RelationMemberListBuilder>  m_rml_builder{};


	template <typename T>
	class ExpatXMLParser {

		XML_Parser m_parser;

		static void XMLCALL start_element_wrapper(void* data, const XML_Char* element, const XML_Char** attrs) {
			static_cast<OSMChangeXMLParser*>(data)->start_element(element, attrs);
		}

		static void XMLCALL end_element_wrapper(void* data, const XML_Char* element) {
			static_cast<OSMChangeXMLParser*>(data)->end_element(element);
		}

		// This handler is called when there are any XML entities
		// declared in the OSM file. Entities are normally not used,
		// but they can be misused. See
		// https://en.wikipedia.org/wiki/Billion_laughs
		// The handler will just throw an error.
		static void entity_declaration_handler(void* /*userData*/,
				const XML_Char* /*entityName*/,
				int /*is_parameter_entity*/,
				const XML_Char* /*value*/,
				int /*value_length*/,
				const XML_Char* /*base*/,
				const XML_Char* /*systemId*/,
				const XML_Char* /*publicId*/,
				const XML_Char* /*notationName*/) {
			throw xml_error{"XML entities are not supported"};
		}

	public:

		explicit ExpatXMLParser(T* callback_object) :
			m_parser(XML_ParserCreate(nullptr)) {
			if (!m_parser) {
				throw osmium::io_error{"Internal error: Can not create parser"};
			}
			XML_SetUserData(m_parser, callback_object);
			XML_SetElementHandler(m_parser, start_element_wrapper, end_element_wrapper);
			XML_SetEntityDeclHandler(m_parser, entity_declaration_handler);
		}

		ExpatXMLParser(const ExpatXMLParser&) = delete;
		ExpatXMLParser(ExpatXMLParser&&) = delete;

		ExpatXMLParser& operator=(const ExpatXMLParser&) = delete;
		ExpatXMLParser& operator=(ExpatXMLParser&&) = delete;

		~ExpatXMLParser() noexcept {
			XML_ParserFree(m_parser);
		}

		void operator()(const std::string& data, bool last) {
			if (XML_Parse(m_parser, data.data(), static_cast_with_assert<int>(data.size()), last) == XML_STATUS_ERROR) {
				throw xml_error{m_parser};
			}
		}

	}; // class ExpatXMLParser

	template <typename T>
	static void check_attributes(const XML_Char** attrs, T check) {
		while (*attrs) {
			check(attrs[0], attrs[1]);
			attrs += 2;
		}
	}

	const char* init_object(osmium::OSMObject& object, const XML_Char** attrs) {
		const char* user = "";

		if (m_operation == context::in_delete) {
			object.set_visible(false);
		}

		osmium::Location location;

		check_attributes(attrs, [&location, &user, &object](const XML_Char* name, const XML_Char* value) {
			if (!std::strcmp(name, "lon")) {
				location.set_lon(value);
			} else if (!std::strcmp(name, "lat")) {
				location.set_lat(value);
			} else if (!std::strcmp(name, "id")) {
		        object.set_id(value);
			} else if (!std::strcmp(name, "visible")) {
		        object.set_visible(value);
			} else if (!std::strcmp(name, "changeset")) {
		        object.set_changeset(value);
			} else if (!std::strcmp(name, "version")) {
		        object.set_version(value);
			}  // don't parse any other attributes here
		});

		if (m_operation == context::in_delete) {
			if (object.visible()) {
				throw xml_error{"Deleted object cannot be set to visible"};
			}
			// We cannot extend existing libosmium objects, or pass around generic
			// information from Parser to Handler. Until we find some better
			// way of doing this, we simply keep this flag in the UID field,
			// which is not being used in OsmChange files anyway.
			//
			// See https://github.com/osmcode/libosmium/issues/239
			//
			object.set_uid(m_if_unused ? 2 : 1);
		}

		if (m_operation == context::in_create) {
			 // we always override version number for create operations (they are not mandatory)
			object.set_version(0u);
		} else if (m_operation == context::in_delete ||
				   m_operation == context::in_modify) {
			// objects for other operations must have a positive version number
			if (object.version() < 1){
				throw xml_error{"Invalid version number "};
			}
		}

		if (location && object.type() == osmium::item_type::node) {
			static_cast<osmium::Node&>(object).set_location(location);
		}

		return user;
	}

	void get_tag(osmium::builder::Builder& builder, const XML_Char** attrs) {
		const char* k = "";
		const char* v = "";

		check_attributes(attrs, [&k, &v](const XML_Char* name, const XML_Char* value) {
			if (name[0] == 'k' && name[1] == 0) {
				k = value;
			} else if (name[0] == 'v' && name[1] == 0) {
				v = value;
			}
		});

		if (!m_tl_builder) {
			m_tl_builder.reset(new osmium::builder::TagListBuilder{builder});
		}
		m_tl_builder->add_tag(k, v);
	}

	void mark_header_as_done() {
		set_header_value(m_header);
	}

	void start_element(const XML_Char* element, const XML_Char** attrs) {
		switch (m_context) {
			case context::root:
				if (!std::strcmp(element, "osmChange")) {
					m_header.set_has_multiple_object_versions(true);
				} else {
					throw xml_error{std::string{"Unknown top-level element: "} + element};
				}
				m_context = context::top;
				break;

			case context::top:
				assert(!m_tl_builder);

				if (!std::strcmp(element, "create")) {
					mark_header_as_done();
					m_context = m_operation = context::in_create;
				} else if (!std::strcmp(element, "modify")) {
					mark_header_as_done();
					m_context = m_operation = context::in_modify;
				} else if (!std::strcmp(element, "delete")) {
					mark_header_as_done();
					m_if_unused = false;
					check_attributes(attrs, [&](const XML_Char* name, const XML_Char*) {
						if (!std::strcmp(name, "if-unused")) {
							m_if_unused = true;
						}
					});
					m_context = m_operation = context::in_delete;
				} else {
					throw xml_error{std::string{"Unknown operation: "} + element};
				}
				break;

			case context::in_delete:
			case context::in_create:
			case context::in_modify:
				if (!std::strcmp(element, "node")) {
					m_node_builder.reset(new osmium::builder::NodeBuilder{m_buffer});
					m_node_builder->set_user(init_object(m_node_builder->object(), attrs));
					m_context = context::node;
				} else if (!std::strcmp(element, "way")) {
					m_way_builder.reset(new osmium::builder::WayBuilder{m_buffer});
					m_way_builder->set_user(init_object(m_way_builder->object(), attrs));
					m_context = context::way;
				} else if (!std::strcmp(element, "relation")) {
					m_relation_builder.reset(new osmium::builder::RelationBuilder{m_buffer});
					m_relation_builder->set_user(init_object(m_relation_builder->object(), attrs));
					m_context = context::relation;
				}
				break;

			case context::node:
				m_last_context = context::node;
				m_context = context::in_object;
				if (!std::strcmp(element, "tag")) {
					get_tag(*m_node_builder, attrs);
				}
				break;
			case context::way:
				m_last_context = context::way;
				m_context = context::in_object;
				if (!std::strcmp(element, "nd")) {
					m_tl_builder.reset();

					if (!m_wnl_builder) {
						m_wnl_builder.reset(new osmium::builder::WayNodeListBuilder{*m_way_builder});
					}

					NodeRef nr;
					check_attributes(attrs, [&nr](const XML_Char* name, const XML_Char* value) {
						if (!std::strcmp(name, "ref")) {
							nr.set_ref(osmium::string_to_object_id(value));
						} else if (!std::strcmp(name, "lon")) {
							nr.location().set_lon(value);
						} else if (!std::strcmp(name, "lat")) {
							nr.location().set_lat(value);
						}
					});
					m_wnl_builder->add_node_ref(nr);
				} else if (!std::strcmp(element, "tag")) {
					m_wnl_builder.reset();
					get_tag(*m_way_builder, attrs);
				}
				break;
			case context::relation:
				m_last_context = context::relation;
				m_context = context::in_object;
				if (!std::strcmp(element, "member")) {
					m_tl_builder.reset();

					if (!m_rml_builder) {
						m_rml_builder.reset(new osmium::builder::RelationMemberListBuilder{*m_relation_builder});
					}

					item_type type = item_type::undefined;
					object_id_type ref = 0;
					bool ref_is_set = false;
					const char* role = "";
					check_attributes(attrs, [&type, &ref, &ref_is_set, &role](const XML_Char* name, const XML_Char* value) {
						if (!std::strcmp(name, "type")) {
							type = char_to_item_type(value[0]);
						} else if (!std::strcmp(name, "ref")) {
							ref = osmium::string_to_object_id(value);
							ref_is_set = true;
						} else if (!std::strcmp(name, "role")) {
							role = static_cast<const char*>(value);
						}
					});
					if (type != item_type::node && type != item_type::way && type != item_type::relation) {
						throw xml_error{"Unknown type on relation member"};
					}
					if (!ref_is_set) {
						throw xml_error{"Missing ref on relation member"};
					}
					m_rml_builder->add_member(type, ref, role);
				} else if (!std::strcmp(element, "tag")) {
					m_rml_builder.reset();
					get_tag(*m_relation_builder, attrs);
				}
				break;
			case context::in_object:
				throw xml_error{"xml file nested too deep"};
				break;
		}
	}

	void end_element(const XML_Char* element) {
		switch (m_context) {
			case context::root:
				assert(false); // should never be here
				break;
			case context::top:
				if (!std::strcmp(element, "osmChange")) {
					mark_header_as_done();
					m_context = m_operation = context::root;
				}
				break;
			case context::in_create:
				assert(!std::strcmp(element, "create"));
				m_context = m_operation = context::top;
				break;
			case context::in_modify:
				assert(!std::strcmp(element, "modify"));
				m_context = m_operation = context::top;
				break;
			case context::in_delete:
				assert(!std::strcmp(element, "delete"));
				m_context = m_operation =  context::top;
				break;
			case context::node:
				assert(!std::strcmp(element, "node"));
				m_tl_builder.reset();
				m_node_builder.reset();
				m_buffer.commit();
				m_context = m_operation;
				flush_buffer();
				break;
			case context::way:
				assert(!std::strcmp(element, "way"));
				m_tl_builder.reset();
				m_wnl_builder.reset();
				m_way_builder.reset();
				m_buffer.commit();
				m_context = m_operation;
				flush_buffer();
				break;
			case context::relation:
				assert(!std::strcmp(element, "relation"));
				m_tl_builder.reset();
				m_rml_builder.reset();
				m_relation_builder.reset();
				m_buffer.commit();
				m_context = m_operation;
				flush_buffer();
				break;
			case context::in_object:
				m_context = m_last_context;
				break;
		}
	}

	void flush_buffer() {
		if (m_buffer.committed() > buffer_size / 10 * 9) {
			send_to_output_queue(std::move(m_buffer));
			osmium::memory::Buffer buffer(buffer_size);
			using std::swap;
			swap(m_buffer, buffer);
		}
	}

public:

	explicit OSMChangeXMLParser(osmium::io::detail::parser_arguments& args) :
	osmium::io::detail::Parser(args),
		m_buffer(buffer_size) {
	}

	OSMChangeXMLParser(const OSMChangeXMLParser&) = delete;
	OSMChangeXMLParser& operator=(const OSMChangeXMLParser&) = delete;

	OSMChangeXMLParser(OSMChangeXMLParser&&) = delete;
	OSMChangeXMLParser& operator=(OSMChangeXMLParser&&) = delete;

	~OSMChangeXMLParser() noexcept final = default;

	void run() final {
		osmium::thread::set_thread_name("_osmium_xml_in");

		ExpatXMLParser<OSMChangeXMLParser> parser{this};

		while (!input_done()) {
			const std::string data{get_input()};
			parser(data, input_done());
		}

		mark_header_as_done();

		if (m_buffer.committed() > 0) {
			send_to_output_queue(std::move(m_buffer));
		}
	}

}; // class OSMChangeXMLParser

// we want the register_parser() function to run, setting
// the variable is only a side-effect, it will never be used
const bool registered_xml_parser = osmium::io::detail::ParserFactory::instance().register_parser(
	osmium::io::file_format::xml,
	[](osmium::io::detail::parser_arguments& args) {
		return std::unique_ptr<osmium::io::detail::Parser>(new OSMChangeXMLParser{args});
});

// dummy function to silence the unused variable warning from above
inline bool get_registered_xml_parser() noexcept {
	return registered_xml_parser;
}


#endif // OSMCHANGE_INPUT_FORMAT_HPP

